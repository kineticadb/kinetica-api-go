{
    "endpoint": "/filter/byrange", 
    "type": "record", 
    "name": "filter_by_range_request", 
    "desc_name": "Filter by Range",
    "on_prem_only": false,
    "is_host_manager_endpoint": false,
    "is_single_table_oriented": true,
    "short_doc": "Filter a dataset for records within a 1-D range",
    "doc": "Calculates which objects from a table have a column that is within
the given bounds. An object from the table identified by @{input table_name} is
added to the view @{input view_name} if its column is within
[@{input lower_bound}, @{input upper_bound}] (inclusive). The operation is
synchronous. The response provides a count of the number of objects which passed
the bound filter.  Although this functionality can also be accomplished with the
standard filter function, it is more efficient.

For track objects, the count reflects how many points fall within the given
bounds (which may not include all the track points of any given track).",
 
    "fields": [
        {
            "name": "table_name", 
            "type": "string", 
            "doc": "Name of the table on which the filter by range operation will be performed, in [schema_name.]table_name format, using standard {name resolution rules}@{link /concepts/tables/#table-name-resolution}.  Must be an existing table.", 
            "value":
            {
                "is_input_table_name": true
            }
        }, 
        {
            "name": "view_name", 
            "type": "string", 
            "doc": "If provided, then this will be the name of the view containing the results, in [schema_name.]view_name format, using standard {name resolution rules}@{link /concepts/tables/#table-name-resolution} and meeting {table naming criteria}@{link /concepts/tables/#table-naming-criteria}.  Must not be an already existing table or view.", 
            "value":
            {
                "is_output_table_name": true,
                "default" : ""
            }
        }, 
        {
            "name": "column_name", 
            "type": "string", 
            "doc": "Name of a column on which the operation would be applied.", 
            "value": {}
        }, 
        {
            "name": "lower_bound", 
            "type": "double", 
            "doc": "Value of the lower bound (inclusive).", 
            "value": {}
        }, 
        {
            "name": "upper_bound", 
            "type": "double", 
            "doc": "Value of the upper bound (inclusive).", 
            "value": {}
        }, 
        {
            "name": "options", 
            "type":
            {
                "type" : "map",
                "values" : "string"
            }, 
            "doc": "Optional parameters.", 
            "value":
            {
                 "default" : {},
                 "valid_keys" :
                 {
                     "collection_name" :
                     {
                         "doc": "[DEPRECATED--please specify the containing schema for the view as part of @{input view_name} and use @{endpoint /create/schema} to create the schema if non-existent]  Name of a schema for the newly created view. If the schema is non-existent, it will be automatically created.",
                         "value" : {}
                     },
                     "refresh":
                     {
                         "doc": "<DEVELOPER>",
                         "value": { "internal_option": true }
                     }
                 }                  
            }
        }
    ]
}
