{
    "endpoint": "/modify/graph",
    "name": "modify_graph_request",
    "desc_name": "Modify Graph",
    "on_prem_only": false,
    "is_host_manager_endpoint": false,
    "is_single_table_oriented": false,
    "type": "record",
    "doc": "Update an existing graph network using given nodes, edges, weights,
restrictions, and options.
    
IMPORTANT: It's highly recommended that you review the
{Network Graphs & Solvers}@{link /graph_solver/network_graph_solver/}
concepts documentation, and
{Graph REST Tutorial}@{link /guides/graph_rest_guide/}
before using this endpoint.",
    "short_doc": "Update an existing graph network.",
    "fields": [
        {
          "name": "graph_name",
          "type": "string",
          "doc": "Name of the graph resource to modify.",
          "value": {}
        },       
        {
            "name": "nodes",
            "type": {
                "type": "array",
                "items": "string"
            },
            "doc": "Nodes with which to update existing @{input nodes} in graph specified by @{input graph_name}. Review {Nodes}@{link /graph_solver/network_graph_solver/#nodes} for more information. Nodes must be specified using {identifiers}@{link /graph_solver/network_graph_solver/#identifiers}; identifiers are grouped as {combinations}@{link /graph_solver/network_graph_solver/#id-combos}. Identifiers can be used with existing column names, e.g., 'table.column AS NODE_ID', expressions, e.g., 'ST_MAKEPOINT(column1, column2) AS NODE_WKTPOINT', or raw values, e.g., '{9, 10, 11} AS NODE_ID'. If using raw values in an identifier combination, the number of values specified must match across the combination. Identifier combination(s) do not have to match the method used to create the graph, e.g., if column names were specified to create the graph, expressions or raw values could also be used to modify the graph.",
            "value": {}
        },
        {
            "name": "edges",
            "type": {
                "type": "array",
                "items": "string"
            },
            "doc": "Edges with which to update existing @{input edges} in graph specified by @{input graph_name}. Review {Edges}@{link /graph_solver/network_graph_solver/#edges} for more information. Edges must be specified using {identifiers}@{link /graph_solver/network_graph_solver/#identifiers}; identifiers are grouped as {combinations}@{link /graph_solver/network_graph_solver/#id-combos}. Identifiers can be used with existing column names, e.g., 'table.column AS EDGE_ID', expressions, e.g., 'SUBSTR(column, 1, 6) AS EDGE_NODE1_NAME', or raw values, e.g., \"{'family', 'coworker'} AS EDGE_LABEL\". If using raw values in an identifier combination, the number of values specified must match across the combination. Identifier combination(s) do not have to match the method used to create the graph, e.g., if column names were specified to create the graph, expressions or raw values could also be used to modify the graph.",
            "value": {}
        },
        {
            "name": "weights",
            "type": {
                "type": "array",
                "items": "string"
            },
            "doc": "Weights with which to update existing @{input weights} in graph specified by @{input graph_name}. Review {Weights}@{link /graph_solver/network_graph_solver/#graph-weights} for more information. Weights must be specified using {identifiers}@{link /graph_solver/network_graph_solver/#identifiers}; identifiers are grouped as {combinations}@{link /graph_solver/network_graph_solver/#id-combos}. Identifiers can be used with existing column names, e.g., 'table.column AS WEIGHTS_EDGE_ID', expressions, e.g., 'ST_LENGTH(wkt) AS WEIGHTS_VALUESPECIFIED', or raw values, e.g., '{4, 15} AS WEIGHTS_VALUESPECIFIED'. If using raw values in an identifier combination, the number of values specified must match across the combination. Identifier combination(s) do not have to match the method used to create the graph, e.g., if column names were specified to create the graph, expressions or raw values could also be used to modify the graph.",
            "value": {}
        },
        {
            "name": "restrictions",
            "type": {
                "type": "array",
                "items": "string"
            },
            "doc": "Restrictions with which to update existing @{input restrictions} in graph specified by @{input graph_name}. Review {Restrictions}@{link /graph_solver/network_graph_solver/#graph-restrictions} for more information. Restrictions must be specified using {identifiers}@{link /graph_solver/network_graph_solver/#identifiers}; identifiers are grouped as {combinations}@{link /graph_solver/network_graph_solver/#id-combos}. Identifiers can be used with existing column names, e.g., 'table.column AS RESTRICTIONS_EDGE_ID', expressions, e.g., 'column/2 AS RESTRICTIONS_VALUECOMPARED', or raw values, e.g., '{0, 0, 0, 1} AS RESTRICTIONS_ONOFFCOMPARED'. If using raw values in an identifier combination, the number of values specified must match across the combination. Identifier combination(s) do not have to match the method used to create the graph, e.g., if column names were specified to create the graph, expressions or raw values could also be used to modify the graph.",
            "value": {}
        },
        {
            "name": "options",
            "doc": "Optional parameters.",
            "type": {
                "type": "map",
                "values": "string"
            },
            "value": {
                "default": {},
                "valid_keys": {
                    "restriction_threshold_value": {
                        "type": "float",
                        "doc": "Value-based restriction comparison. Any node or edge with a RESTRICTIONS_VALUECOMPARED value greater than the {restriction_threshold_value}@{key of input options} will not be included in the graph.",
                        "value": {}
                    },
                    "export_create_results": {
                        "type": "boolean",
                        "doc": "If set to {true}@{choice of input.key options.export_create_results}, returns the graph topology in the response as arrays.",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }
                    },
                    "enable_graph_draw": {
                        "type": "boolean",
                        "doc": "If set to {true}@{choice of input.key options.enable_graph_draw}, adds a 'EDGE_WKTLINE' column identifier to the specified {graph_table}@{key of input options} so the graph can be viewed via WMS; for social and non-geospatial graphs, the 'EDGE_WKTLINE' column identifier will be populated with spatial coordinates derived from a flattening layout algorithm so the graph can still be viewed.",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }
                    },
                    "save_persist": {
                        "type": "boolean",
                        "doc" : "If set to {true}@{choice of input.key options.save_persist}, the graph will be saved in the persist directory (see the {config reference}@{link /config/} for more information). If set to {false}@{choice of input.key options.save_persist}, the graph will be removed when the graph server is shutdown.",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }
                    },
                    "add_table_monitor": {
                        "type": "boolean",
                        "doc" : "Adds a table monitor to every table used in the creation of the graph; this table monitor will trigger the graph to update dynamically upon inserts to the source table(s). Note that upon database restart, if {save_persist}@{key of input options} is also set to {true}@{choice of input.key options.save_persist}, the graph will be fully reconstructed and the table monitors will be reattached. For more details on table monitors, see @{endpoint /create/tablemonitor}.",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }
                    },
                    "graph_table": {
                        "type" : "string",
                        "doc"  : "If specified, the created graph is also created as a table with the given name, in [schema_name.]table_name format, using standard {name resolution rules}@{link /concepts/tables/#table-name-resolution} and meeting {table naming criteria}@{link /concepts/tables/#table-naming-criteria}.  This table will have the following identifier columns: 'EDGE_ID', 'EDGE_NODE1_ID', 'EDGE_NODE2_ID'. If left blank, no table is created.",
                        "value": {
                            "default":""
                        }
                    },
                    "remove_label_only": {
                        "type": "boolean",
                        "doc"  : "When RESTRICTIONS on labeled entities requested, if set to true this will NOT delete the entity but only the label associated with the entity. Otherwise (default), it'll delete the label AND the entity.",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }                        
                    },
                    "add_turns": {
                        "type": "boolean",
                        "doc" : "Adds dummy 'pillowed' edges around intersection nodes where there are more than three edges so that additional weight penalties can be imposed by the solve endpoints. (increases the total number of edges).",
                        "value": {
                            "default": "false",
                            "valid_choices" :
                            {
                                "true": { "doc": "", "value": {} },
                                "false": { "doc": "", "value": {} }
                            }
                        }
                    },
                    "turn_angle": {
                        "type": "float",
                        "doc": "Value in degrees modifies the thresholds for attributing right, left, sharp turns, and intersections. It is the vertical deviation angle from the incoming edge to the intersection node. The larger the value, the larger the threshold for sharp turns and intersections; the smaller the value, the larger the threshold for right and left turns; 0 < turn_angle < 90",
                        "value": {
                            "default": "60"
                        }
                    }
                }
            }
        }
    ]
}
